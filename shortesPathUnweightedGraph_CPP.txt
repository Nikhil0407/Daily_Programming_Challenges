#include <bits/stdc++.h>
using namespace std;
void bfs(vector<vector<int> >& graph, int S,
         vector<int>& par, vector<int>& dist)
{
    queue<int> q;
    dist[S] = 0;
    q.push(S);
    while (!q.empty()) {
        int node = q.front();
        q.pop();
        for (int neighbour : graph[node]) {
            if (dist[neighbour] == 1e9) {
                par[neighbour] = node;
                dist[neighbour] = dist[node] + 1;
                q.push(neighbour);
            }
        }
    }
}

void printShortestDistance(vector<vector<int> >& graph,int S, int D, int V)
{

    vector<int> par(V, -1);
    vector<int> dist(V, 1e9);
    bfs(graph, S, par, dist);
    if (dist[D] == 1e9) {
        cout << "Source and Destination are not connected";
        return;
    }

    vector<int> path;
    int currentNode = D;
    path.push_back(D);
    while (par[currentNode] != -1) {
        path.push_back(par[currentNode]);
        currentNode = par[currentNode];
    }
    cout<<path.size()-1<<endl;
}

int main()
{
    int V = 5, E = 5;
    int S = 0, D = 4;
    vector<vector<int> > edges ={{0, 1}, {0, 2}, {1, 3}, {2, 3}, {3, 4}};

    vector<vector<int> > graph(V);
    for (auto edge : edges) {
        graph[edge[0]].push_back(edge[1]);
        graph[edge[1]].push_back(edge[0]);
    }

    printShortestDistance(graph, S, D, V);
    return 0;
}